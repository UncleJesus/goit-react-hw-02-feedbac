{"version":3,"sources":["components/Statistics/index.js","components/Statistics/Statistics.jsx","components/Feedback/index.js","components/Feedback/Feedback.jsx","components/Section/index.js","components/Section/Section.jsx","components/Notifi/index.js","components/Notifi/Notifi.jsx","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","Feedback","feedback","type","onClick","Section","title","children","Notifi","props","App","state","countFeedbacks","element","key","target","textContent","toLowerCase","setState","countTotal","Object","values","reduce","acc","countPositiveFeedbackPercentage","Math","round","this","Component","defaultProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAEeA,ECAI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,YCNWC,ECAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACtB,qCACE,wBAAQC,KAAK,SAASC,QAASF,EAA/B,kBAGA,wBAAQC,KAAK,SAASC,QAASF,EAA/B,qBAGA,wBAAQC,KAAK,SAASC,QAASF,EAA/B,qBCRWG,ECAC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,MCHUC,ECAA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAAe,4BAAIA,KCI5BC,E,4MAKJC,MAAQ,CACNf,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPc,eAAiB,SAACC,GAChB,IAAIC,EAAMD,EAAQE,OAAOC,YAAYC,cACrC,EAAKC,UAAS,SAACP,GAAD,sBAAeG,EAAMH,EAAMG,GAAO,O,EAGlDK,WAAa,SAACpB,GAAD,OACXqB,OAAOC,OAAOtB,GAAOuB,QAAO,SAACC,EAAKV,GAAN,OAAkBU,EAAMV,M,EAEtDW,gCAAkC,SAAC5B,EAAMG,GAAP,OAChC0B,KAAKC,MAAc,IAAP9B,EAAcG,I,uDAElB,IAAD,EACwB4B,KAAKhB,MAA5Bf,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQ4B,KAAKR,WAAWQ,KAAKhB,OAC7BX,EAAqB2B,KAAKH,gCAC9B5B,EACAG,GAGF,OACE,qCACE,cAAC,EAAD,CAASO,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBJ,SAAUyB,KAAKf,mBAGjCb,EAAQ,EACP,cAAC,EAAD,CAASO,MAAM,aAAf,SACE,cAAC,EAAD,CACEV,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,MAIxB,cAAC,EAAD,CAAcS,MAAM,6B,GA/CZmB,aAAZlB,EACGmB,aAAe,GAqDTnB,QCxDfoB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f197a039.chunk.js","sourcesContent":["import Statistics from './Statistics';\n\nexport default Statistics;\n","import React from \"react\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <ul>\n    <li>Good: {good}</li>\n    <li>Neutral: {neutral}</li>\n    <li>Bad: {bad}</li>\n    <li>Total: {total}</li>\n    <li>Positive Feedback: {positivePercentage} %</li>\n  </ul>\n);\n\nexport default Statistics;\n","import Feedback from './Feedback';\n\nexport default Feedback;\n","import React from \"react\";\n\nconst FeedbackOptions = ({ feedback }) => (\n  <>\n    <button type=\"button\" onClick={feedback}>\n      Good\n    </button>\n    <button type=\"button\" onClick={feedback}>\n      Neutral\n    </button>\n    <button type=\"button\" onClick={feedback}>\n      Bad\n    </button>\n  </>\n);\n\nexport default FeedbackOptions;\n","import Section from './Section';\n\nexport default Section;\n","import React from \"react\";\n\nconst Section = ({ title, children }) => (\n  <section>\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nexport default Section;\n","import Notifi from './Notifi';\n\nexport default Notifi;\n","import React from \"react\";\n\nconst Notifi = ({ props }) => <p>{props}</p>;\n\nexport default Notifi;\n","import React, { Component } from \"react\";\nimport Statistics from \"./components/Statistics\";\nimport FeedbackOptions from \"./components/Feedback\";\nimport Section from \"./components/Section\";\nimport Notification from \"./components/Notifi\";\n\nclass App extends Component {\n  static defaultProps = {};\n\n  static propTypes = {};\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countFeedbacks = (element) => {\n    let key = element.target.textContent.toLowerCase();\n    this.setState((state) => ({ [key]: state[key] + 1 }));\n  };\n\n  countTotal = (total) =>\n    Object.values(total).reduce((acc, element) => acc + element);\n\n  countPositiveFeedbackPercentage = (good, total) =>\n    Math.round((good * 100) / total);\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotal(this.state);\n    const positivePercentage = this.countPositiveFeedbackPercentage(\n      good,\n      total\n    );\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions feedback={this.countFeedbacks} />\n        </Section>\n\n        {total > 0 ? (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            />\n          </Section>\n        ) : (\n          <Notification props=\"No feedback given\" />\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}